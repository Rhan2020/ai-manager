name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Build application
      run: npm run build
    
    # - name: Run tests
    #   run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to server
      run: |
        # 添加服务器到known_hosts
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        # 创建部署目录
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          mkdir -p /opt/ai-manager
          cd /opt/ai-manager
          
          # 备份当前版本
          if [ -f docker-compose.yml ]; then
            docker-compose down
            cp -r . ../ai-manager-backup-\$(date +%Y%m%d_%H%M%S) || true
          fi
        "
        
        # 复制必要文件到服务器
        scp docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/ai-manager/
        scp -r nginx/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/ai-manager/ || true
        
        # 在服务器上更新和启动服务
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /opt/ai-manager
          
          # 拉取最新镜像
          docker-compose pull
          
          # 启动服务
          docker-compose up -d
          
          # 等待服务启动
          sleep 30
          
          # 检查服务状态
          docker-compose ps
          
          # 清理旧镜像
          docker image prune -f
        "
    
    - name: Health Check
      run: |
        # 等待服务完全启动
        sleep 60
        
        # 健康检查
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          # 检查服务是否正常运行
          if curl -f http://localhost:3000/api/stats; then
            echo '✅ 部署成功！服务正常运行'
          else
            echo '❌ 部署失败！服务无法访问'
            docker-compose logs
            exit 1
          fi
        "

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 部署成功！AI任务管理器已更新"
        else
          echo "❌ 部署失败！请检查日志"
        fi